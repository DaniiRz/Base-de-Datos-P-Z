-- Trigger para agregar fecha con funcion NOW() -- 

DELIMITER //
CREATE TRIGGER tr_tb_pedidos BEFORE INSERT ON tb_pedidos
FOR EACH ROW
BEGIN
    IF NEW.fecha_pedido IS NULL THEN
        SET NEW.fecha_pedido_default = NOW();
    END IF;
END //
DELIMITER ;




------ Procedimiento almacenado que actualiza el precio de las existencias si estas son inferiores a 10 
DELIMITER //

 

CREATE PROCEDURE actualizar_precio_producto(IN producto_id INT, IN existencias INT)
BEGIN
    DECLARE nuevo_precio NUMERIC(5,2);
    
    IF existencias < 10 THEN
        SET nuevo_precio = (SELECT precio_producto * 1.1 FROM tb_productos WHERE id_producto = producto_id);
    ELSE
        SET nuevo_precio = (SELECT precio_producto FROM tb_productos WHERE id_producto = producto_id);
    END IF;
    
    UPDATE tb_productos SET precio_producto = nuevo_precio WHERE id_producto = producto_id;
END //

 

DELIMITER ;


---- Funcion que devuelve la suma de las existencias 

DELIMITER //
CREATE FUNCTION obtener_cantidad_existencias(id_sub_categoria INT) RETURNS INT
BEGIN
    DECLARE total_existencias INT;
    SELECT SUM(dp.existencias) INTO total_existencias
    FROM tb_detalle_productos dp
    INNER JOIN tb_productos p ON dp.id_producto = p.id_producto
    WHERE p.id_sub_categoria = id_sub_categoria;
    RETURN total_existencias;
END //
DELIMITER ;


--- Trigger que se activa automaticamente luego de insertar un registro en la tabla productos (Actualiza fecha y hora actual)

DELIMITER //
CREATE TRIGGER tr_actualizar_fecha_registro AFTER INSERT ON tb_productos
FOR EACH ROW
BEGIN
    UPDATE tb_productos
    SET fecha_registro_produc = NOW()
    WHERE id_producto = NEW.id_producto;
END //
DELIMITER ;



----- 
